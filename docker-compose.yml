version: "3.8"

# TODO: !! Ensure env.py is fully populated and db migrations are applied
services:
  wiki:
    build: .
    ports:
      - "${PORT}:5000" # Set port from the environment.
    #volumes:
    #  - .:/app
    env_file: # See  dockerenv for sample values and update accordingly.
      - ./dockerenv
    restart: on-failure
    depends_on:
      ollama:
        condition: service_started
      db:
        condition: service_healthy
    networks:
      - db-net
      - ollama-net
      - nginx-net

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # https://github.com/docker-library/docs/tree/master/nginx#using-environment-variables-in-nginx-configuration-new-in-119
      - ./nginx/templates:/etc/nginx/templates
      - ./certbot/certs:/etc/letsencrypt # Shared with Certbot for SSL certificates
    networks:
      - nginx-net
    env_file:
      - ./dockerenv
    depends_on:
      - wiki
      - certbot # Ensure Certbot is up to provide certificates before Nginx starts
    restart: always
    #command: /bin/sh -c "envsubst '\$DOMAIN_NAME' < /etc/nginx/nginx.conf.template > /etc/nginx/${DOMAIN_NAME}.conf && nginx -c /etc/nginx/${DOMAIN_NAME}.conf -g 'daemon off;'"

  # TODO: Restart Nginx when certificates get updated.
  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/certs:/etc/letsencrypt # Store certificates here
      - certbot_logs:/var/log/letsencrypt
    entrypoint: /bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done'
    env_file:
      - ./dockerenv

  db:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    env_file: # Load variables from dockerenv file
      - ./dockerenv
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - db-net
    healthcheck:
      # https://marcopeg.com/docker-compose-healthcheck/
      #test: [ "CMD-SHELL", "pg_isready", "-q", "-d", "wiki", "-U", "$${POSTGRES_USER}" ]
      #test: [ "CMD-SHELL", "pg_isready -d $POSTGRES_DB -U $POSTGRES_USER"]
      # https://github.com/peter-evans/docker-compose-healthcheck/issues/16#issuecomment-1420377736
      test:
        [
          "CMD-SHELL",
          "psql -h localhost -U $${POSTGRES_USER} -c select 1 -d $${POSTGRES_DB}",
        ]
      interval: 1s
      timeout: 5s
      retries: 10
    restart: always

  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    networks:
      - ollama-net

# TODO: Sync Ollama directory to local Ollama dir so models are shared.
volumes:
  postgres_data:
  certbot_logs:

networks:
  db-net:
    driver: bridge

  nginx-net:
    driver: bridge

  ollama-net:
    driver: bridge
